import os
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters
import httpx
from dotenv import load_dotenv
from flask import Flask
from threading import Thread
import requests
import time

# Load environment variables
load_dotenv()

# ===== Flask Keep-Alive Server =====
app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ –ë–æ—Ç –ø—Ä–∞—Ü—é—î 24/7! / Bot is running 24/7!"

def run_flask():
    app.run(host='0.0.0.0', port=8080)

# ===== Self-Ping Function =====
#def self_ping():
 #   while True:
  #      try:
   #         # Auto-detect Replit URL
    #        repl_url = f"https://{os.getenv('REPL_SLUG')}.{os.getenv('REPL_OWNER')}.repl.co"
     #       requests.get(repl_url, timeout=5)
      #      logging.info("üîÑ Successful self-ping")
       # except Exception as e:
        #    logging.error(f"‚ùå Ping failed: {e}")
       # time.sleep(300)  # Ping every 5 minutes

# ===== Start Keep-Alive Services =====
#Thread(target=run_flask, daemon=True).start()
#Thread(target=self_ping, daemon=True).start()

# ===== Bot Configuration =====
API_TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_KEY = os.getenv("OPENROUTER_API_KEY")
OPENROUTER_URL = "https://openrouter.ai/api/v1/chat/completions"

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

def should_respond(text: str) -> bool:
    text_lower = text.lower().strip()
    words = text_lower.split()

    if not words:
        return False

    if words[0] in ["–±–æ—Ç", "bot"] or words[-1] in ["–±–æ—Ç", "bot"]:
        return True

    greetings = ["–ø—Ä–∏–≤—ñ—Ç", "–∑–¥—Ä–∞—Å—Ç—É–π—Ç–µ", "–¥–æ–±—Ä–æ–≥–æ –¥–Ω—è", "–¥–æ–±—Ä–∏–π –¥–µ–Ω—å", "–¥–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞"]
    if any(greet in words for greet in greetings) and ("–±–æ—Ç" in words or "bot" in words):
        return True

    return False

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text

    if not should_respond(user_message):
        return

    simple_responses = {
        "–ø—Ä–∏–≤—ñ—Ç –±–æ—Ç": "–ü—Ä–∏–≤—ñ—Ç! –ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ Clash of Clans?",
        "–∑–¥—Ä–∞—Å—Ç—É–π—Ç–µ –±–æ—Ç": "–í—ñ—Ç–∞—é! –ó–∞–ø–∏—Ç—É–π—Ç–µ –ø—Ä–æ Clash of Clans.",
        "–¥–æ–±—Ä–æ–≥–æ –¥–Ω—è –±–æ—Ç": "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è! –ß–∏–º –¥–æ–ø–æ–º–æ–≥—Ç–∏ —É Clash of Clans?",
        "–¥–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞ –±–æ—Ç": "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞! –ü–∏—Ç–∞–π—Ç–µ, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞ –∑ Clash of Clans.",
        "–¥—è–∫—É—é –±–æ—Ç": "–†–∞–¥–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏!",
        "—Å–ø–∞—Å–∏–±—ñ –±–æ—Ç": "–ë—É–¥—å –ª–∞—Å–∫–∞!"
    }

    key = user_message.lower().strip()

    if key in simple_responses:
        await update.message.reply_text(simple_responses[key])
        return

    if "—è –¥—É–º–∞—é —ñ–Ω–∞–∫—à–µ" in key:
        await update.message.reply_text("–¶—ñ–∫–∞–≤–∞ –¥—É–º–∫–∞! –ú–æ–∂–µ—à —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ –±—ñ–ª—å—à–µ –ø—Ä–æ Clash of Clans?")
        return

    prompt = [
        {
            "role": "system",
            "content": "–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç –∑ –≥—Ä–∏ Clash of Clans. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –ª–∏—à–µ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ —Ç–µ–º–∏, –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ Clash of Clans."
        },
        {"role": "user", "content": user_message}
    ]

    headers = {
        "Authorization": f"Bearer {OPENROUTER_KEY}",
        "Content-Type": "application/json"
    }

    json_data = {
        "model": "gpt-4o-mini",
        "messages": prompt,
        "max_tokens": 500,
        "temperature": 0.7,
        "top_p": 1
    }

    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(OPENROUTER_URL, headers=headers, json=json_data)
            response.raise_for_status()
            data = response.json()
            ai_reply = data["choices"][0]["message"]["content"]
    except Exception as e:
        logging.error(f"OpenRouter API error: {e}")
        ai_reply = "–í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏."

    await update.message.reply_text(ai_reply)

async def greet_new_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    for member in update.message.new_chat_members:
        name = member.first_name or "–Ω–æ–≤–∞—á–æ–∫"
        await update.message.reply_text(
            f"–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –≤ –≥—Ä—É–ø—É, {name}! üéâ "
            "–Ø–∫—â–æ –º–∞—î—à –ø–∏—Ç–∞–Ω–Ω—è –ø–æ Clash of Clans ‚Äî –ø–∏—à–∏ –º–µ–Ω—ñ!"
        )

if __name__ == "__main__":
    # Auto-restart bot on crash
    while True:
        try:
            bot_app = ApplicationBuilder().token(API_TOKEN).build()
            bot_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
            bot_app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, greet_new_member))

            logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ! / Bot started!")
            bot_app.run_polling()

        except Exception as e:
            logging.error(f"‚ö†Ô∏è –ó–±—ñ–π! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫... / Crash! Restarting in 10 sec... Error: {e}")
            time.sleep(10)
            
