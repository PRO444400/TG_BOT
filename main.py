import os
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters
import httpx
from dotenv import load_dotenv

load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_KEY = os.getenv("OPENROUTER_API_KEY")
OPENROUTER_URL = "https://openrouter.ai/api/v1/chat/completions"

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

def should_respond(text: str) -> bool:
    text_lower = text.lower().strip()
    words = text_lower.split()

    if not words:
        return False

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Å–ª–æ–≤–æ "–±–æ—Ç" –∞–±–æ "bot" –Ω–∞ –ø–æ—á–∞—Ç–∫—É —á–∏ –≤ –∫—ñ–Ω—Ü—ñ
    if words[0] in ["–±–æ—Ç", "bot"] or words[-1] in ["–±–æ—Ç", "bot"]:
        return True

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è + "–±–æ—Ç" –≤ —Ç–µ–∫—Å—Ç—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "–ø—Ä–∏–≤—ñ—Ç –±–æ—Ç")
    greetings = ["–ø—Ä–∏–≤—ñ—Ç", "–∑–¥—Ä–∞—Å—Ç—É–π—Ç–µ", "–¥–æ–±—Ä–æ–≥–æ –¥–Ω—è", "–¥–æ–±—Ä–∏–π –¥–µ–Ω—å", "–¥–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞"]
    if any(greet in words for greet in greetings) and ("–±–æ—Ç" in words or "bot" in words):
        return True

    return False

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text

    if not should_respond(user_message):
        return  # –ú–æ–≤—á–∏–º–æ, —è–∫—â–æ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏

    # –ü—Ä–æ—Å—Ç–∏—Ö –ø—Ä–∏–≤—ñ—Ç–∞–Ω—å –±–µ–∑ "–±–æ—Ç" —ñ–≥–Ω–æ—Ä—É—î–º–æ (—Ç—É—Ç –ª–∏—à–µ –æ–±—Ä–æ–±–∫–∞ –∑ "–±–æ—Ç")
    # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º—ñ—Å—Ç–∏—Ç—å –ø—Ä–æ—Å—Ç—ñ —Ñ—Ä–∞–∑–∏, –∞–ª–µ –∑ "–±–æ—Ç" ‚Äî –º–æ–∂–µ–º–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—á–Ω–æ
    simple_responses = {
        "–ø—Ä–∏–≤—ñ—Ç –±–æ—Ç": "–ü—Ä–∏–≤—ñ—Ç! –ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ Clash of Clans?",
        "–∑–¥—Ä–∞—Å—Ç—É–π—Ç–µ –±–æ—Ç": "–í—ñ—Ç–∞—é! –ó–∞–ø–∏—Ç—É–π—Ç–µ –ø—Ä–æ Clash of Clans.",
        "–¥–æ–±—Ä–æ–≥–æ –¥–Ω—è –±–æ—Ç": "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è! –ß–∏–º –¥–æ–ø–æ–º–æ–≥—Ç–∏ —É Clash of Clans?",
        "–¥–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞ –±–æ—Ç": "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞! –ü–∏—Ç–∞–π—Ç–µ, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞ –∑ Clash of Clans.",
        "–¥—è–∫—É—é –±–æ—Ç": "–†–∞–¥–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏!",
        "—Å–ø–∞—Å–∏–±—ñ –±–æ—Ç": "–ë—É–¥—å –ª–∞—Å–∫–∞!"
    }

    # –í–∏–≤–æ–¥–∏–º–æ –∫–ª—é—á –±–µ–∑ –∑–∞–π–≤–∏—Ö –ø—Ä–æ–±—ñ–ª—ñ–≤ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
    key = user_message.lower().strip()

    if key in simple_responses:
        await update.message.reply_text(simple_responses[key])
        return

    # –Ø–∫—â–æ —Ñ—Ä–∞–∑–∞ "—è –¥—É–º–∞—é —ñ–Ω–∞–∫—à–µ" ‚Äî –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ —à–∞–±–ª–æ–Ω–æ–º
    if "—è –¥—É–º–∞—é —ñ–Ω–∞–∫—à–µ" in key:
        await update.message.reply_text("–¶—ñ–∫–∞–≤–∞ –¥—É–º–∫–∞! –ú–æ–∂–µ—à —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ –±—ñ–ª—å—à–µ –ø—Ä–æ Clash of Clans?")
        return

    # –ó–∞–ø–∏—Ç –¥–æ OpenRouter (GPT) —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Å–∫–ª–∞–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    prompt = [
        {"role": "system", "content": "–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç –∑ –≥—Ä–∏ Clash of Clans. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –ª–∏—à–µ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ —Ç–µ–º–∏, –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ Clash of Clans. –Ø–∫—â–æ –ø–∏—Ç–∞–Ω–Ω—è –Ω–µ –ø—Ä–æ —Ü—é –≥—Ä—É, –≤–≤—ñ—á–ª–∏–≤–æ —Å–∫–∞–∂–∏, —â–æ –º–æ–∂–µ—à –¥–æ–ø–æ–º–æ–≥—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∑ Clash of Clans, –ê–ª–µ —è–∫—â–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ—Å—Ç—ñ —Å–ª–æ–≤–∞ –Ω–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –Ω–∞ —ñ–Ω—à—ñ —Ç–µ–º–∏ —Ç–æ –º–æ–∂–µ—à –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏."},
        {"role": "user", "content": user_message}
    ]

    headers = {
        "Authorization": f"Bearer {OPENROUTER_KEY}",
        "Content-Type": "application/json"
    }

    json_data = {
        "model": "gpt-4o-mini",
        "messages": prompt,
        "max_tokens": 500,
        "temperature": 0.7,
        "top_p": 1
    }

    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(OPENROUTER_URL, headers=headers, json=json_data)
            response.raise_for_status()
            data = response.json()
            ai_reply = data["choices"][0]["message"]["content"]
    except Exception as e:
        logging.error(f"OpenRouter API error: {e}")
        ai_reply = "–í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏."

    await update.message.reply_text(ai_reply)


# –í—ñ—Ç–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤ —É –≥—Ä—É–ø—ñ
async def greet_new_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    for member in update.message.new_chat_members:
        name = member.first_name or "–Ω–æ–≤–∞—á–æ–∫"
        await update.message.reply_text(f"–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –≤ –≥—Ä—É–ø—É, {name}! üéâ –Ø–∫—â–æ –º–∞—î—à –ø–∏—Ç–∞–Ω–Ω—è –ø–æ Clash of Clans ‚Äî –ø–∏—à–∏ –º–µ–Ω—ñ!")


if __name__ == "__main__":
    app = ApplicationBuilder().token(API_TOKEN).build()

    # –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤ –≥—Ä—É–ø–∏
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, greet_new_member))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    app.run_polling()
